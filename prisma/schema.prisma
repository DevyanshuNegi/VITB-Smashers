// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

// --- NECESSARY FOR NEXTAUTH ---

model Account {
    id                       String  @id @default(cuid())
    userId                   String
    type                     String
    provider                 String
    providerAccountId        String
    refresh_token            String?
    access_token             String?
    expires_at               Int?
    token_type               String?
    scope                    String?
    id_token                 String?
    session_state            String?
    user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)
    refresh_token_expires_in Int?

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]

    // RELATION: A user can have many purchases
    purchases Purchase[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

// --- YOUR APPLICATION MODELS ---

model Product {
    id                  String  @id @default(cuid())
    name                String
    description         String?
    price               Int
    isActive            Boolean @default(true)
    googleDriveFolderId String  @unique

    // --- Relationships ---
    batchId String?
    batch   Batch?  @relation(fields: [batchId], references: [id])

    branchId String?
    branch   Branch? @relation(fields: [branchId], references: [id])

    semesterId String?
    semester   Semester? @relation(fields: [semesterId], references: [id])

    typeId String
    type   Type   @relation(fields: [typeId], references: [id])

    // RELATION: A product can be part of many purchases
    purchases Purchase[]

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

// --- CATEGORY MODELS ---

model Batch {
    id       String    @id @default(cuid())
    name     String    @unique
    products Product[]
}

model Branch {
    id       String    @id @default(cuid())
    name     String    @unique
    products Product[]
}

model Semester {
    id       String    @id @default(cuid())
    name     String    @unique
    products Product[]
}

model Type {
    id       String    @id @default(cuid())
    name     String    @unique
    products Product[]
}

// --- NEW E-COMMERCE MODELS ---

// Used to track the status of a payment
enum PurchaseStatus {
    PENDING
    SUCCESS
    FAILED
    REFUNDED
}

// This is the receipt that connects a user to a product
model Purchase {
    id     String @id @default(cuid())
    userId String
    user   User   @relation(fields: [userId], references: [id])

    productId String
    product   Product @relation(fields: [productId], references: [id])

    status PurchaseStatus @default(PENDING)

    // Store the price at the time of purchase, in case product price changes later
    amountPaid Int

    // Store the transaction ID from Stripe, Razorpay, etc. for reference
    paymentGatewayId String? @unique

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}
